# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database"
# or "shutdown".
destructive_warning = True

# log_file location.
log_file = ~/.mycli.log

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Log every query and its results to a file. Enable this by uncommenting the
# line below.
# audit_log = ~/.mycli-audit.log

# Timing of sql statements and table rendering.
timing = True

# Beep after long-running queries are completed; 0 to disable.
beep_after_seconds = 0

# Table format. Possible values: ascii, double, github,
# psql, plain, simple, grid, fancy_grid, pipe, orgtbl, rst, mediawiki, html,
# latex, latex_booktabs, textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: ascii
table_format = ascii

# Syntax coloring style. Possible values (many support the "-dark" suffix):
# manni, igor, xcode, vim, autumn, vs, rrt, native, perldoc, borland, tango, emacs,
# friendly, monokai, paraiso, colorful, murphy, bw, pastie, paraiso, trac, default,
# fruity.
# Screenshots at http://mycli.net/syntax
# Can be further modified in [colors]
syntax_style = default

# Keybindings: Possible values: emacs, vi.
# Emacs mode: Ctrl-A is home, Ctrl-E is end. All emacs keybindings are available in the REPL.
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
key_bindings = vi

# Enabling this option will show the suggestions in a wider menu. Thus more items are suggested.
wider_completion_menu = False

# MySQL prompt
# \D - The full current date
# \d - Database name
# \h - Hostname of the server
# \m - Minutes of the current time
# \n - Newline
# \P - AM/PM
# \p - Port
# \R - The current time, in 24-hour military time (0-23)
# \r - The current time, standard 12-hour time (1-12)
# \s - Seconds of the current time
# \t - Product type (Percona, MySQL, MariaDB, TiDB)
# \A - DSN alias name (from the [alias_dsn] section)
# \u - Username
# \x1b[...m - insert ANSI escape sequence
prompt = "\t \u@\h:\d> "
prompt_continuation = ->

# Skip intro info on startup and outro info on exit
less_chatty = False

# Use alias from --login-path instead of host name in prompt
login_path_as_host = False

# Cause result sets to be displayed vertically if they are too wide for the current window,
# and using normal tabular format otherwise. (This applies to statements terminated by ; or \G.)
auto_vertical_output = False

# keyword casing preference. Possible values "lower", "upper", "auto"
keyword_casing = auto

# disabled pager on startup
enable_pager = True

# Choose a specific pager
pager = less -SFX

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = "bg:#ffffff #000000"
completion-menu.completion = "bg:#008888 #ffffff"
completion-menu.meta.completion.current = "bg:#44aaaa #000000"
completion-menu.meta.completion = "bg:#448888 #ffffff"
completion-menu.multi-column-meta = "bg:#aaffff #000000"
scrollbar.arrow = "bg:#003333"
scrollbar = "bg:#00aaaa"
selected = "#ffffff bg:#6666aa"
search = "#ffffff bg:#4444aa"
search.current = "#ffffff bg:#44aa44"
bottom-toolbar = "bg:#222222 #aaaaaa"
bottom-toolbar.off = "bg:#222222 #888888"
bottom-toolbar.on = "bg:#222222 #ffffff"
search-toolbar = noinherit bold
search-toolbar.text = nobold
system-toolbar = noinherit bold
arg-toolbar = noinherit bold
arg-toolbar.text = nobold
bottom-toolbar.transaction.valid = "bg:#222222 #00ff5f bold"
bottom-toolbar.transaction.failed = "bg:#222222 #ff005f bold"

# style classes for colored table output
output.header = "#00ff5f bold"
output.odd-row = ""
output.even-row = ""
output.null = "#808080"

# SQL syntax highlighting overrides
# sql.comment = 'italic #408080'
# sql.comment.multi-line = ''
# sql.comment.single-line = ''
# sql.comment.optimizer-hint = ''
# sql.escape = 'border:#FF0000'
# sql.keyword = 'bold #008000'
# sql.datatype = 'nobold #B00040'
# sql.literal = ''
# sql.literal.date = ''
# sql.symbol = ''
# sql.quoted-schema-object = ''
# sql.quoted-schema-object.escape = ''
# sql.constant = '#880000'
# sql.function = '#0000FF'
# sql.variable = '#19177C'
# sql.number = '#666666'
# sql.number.binary = ''
# sql.number.float = ''
# sql.number.hex = ''
# sql.number.integer = ''
# sql.operator = '#666666'
# sql.punctuation = ''
# sql.string = '#BA2121'
# sql.string.double-quouted = ''
# sql.string.escape = 'bold #BB6622'
# sql.string.single-quoted = ''
# sql.whitespace = ''

# Favorite queries.
[favorite_queries]
hh2_tours_id_in = select * from hh2_tours where id in ($1);
hh2_tour_points_by_id = "select t.id, t.name, tp.id, tp.name from hh2_tour_points_map as tp join hh2_tours as t on t.id=tp.tour_id where tp.id=$1;"
hh2_tours_by_date = "select t.id, t.name, td.date from hh2_tour_dates as td join hh2_tours as t on t.id=td.tour_id where td.date='$1';"
hh2_tours_by_point_id = "select t.id, t.name, tp.id, tp.name from hh2_tour_points_map as tp join hh2_tours as t on t.id=tp.tour_id where tp.id=5687;"
hh2_tour_points_like_name = "select t.id tour_id, t.name tour_name, tp.id point_id, tp.name point_name from hh2_tour_points_map as tp join hh2_tours as t on t.id=tp.tour_id where tp.name like '%$1%';"
hh2_tour_points_and_dest_like_name = "select t.id tour_id, t.name tour_name, tp.id point_id, tp.name point_name, td.id dest_id, td.name dest_name from hh2_tour_points_map as tp join hh2_tours as t on t.id=tp.tour_id join hh2_tour_destinations_map td on t.id=td.tour_id where tp.name like '%$1%' and td.name like '%$2%';"
hh2_tour_points_and_date_like = '''SELECT t.id tour_id,
       t.name tour_name,
       tp.id point_id,
       tp.name point_name,
       td.id dest_id,
       td.name dest_name,
       tdt.`date`
  FROM hh2_tour_points_map AS tp
  JOIN hh2_tours AS t
    ON t.id = tp.tour_id
  JOIN hh2_tour_destinations_map td
    ON t.id = td.tour_id
  JOIN hh2_tour_dates tdt
    ON t.id = tdt.tour_id
 WHERE tp.name like '%$1%'
   AND tdt.date like '%$2%';'''
hh2_tours_dest_by_id = " select * from hh2_tour_destinations where id=$1;"
hh2_tours_dest_like_name = '''SELECT *
  FROM hh2_tour_destinations
 WHERE name like '%$1%';'''
pack_dates_where_depart_whereIn_supp = '''SELECT date, p.api_id,
       name
  FROM packages_departure_dates pdd
  LEFT JOIN packages_departure_points pdp
    ON pdd.package_id = pdp.package_id
  LEFT JOIN packages p
    ON pdd.package_id = p.id
 WHERE pdp.geography_id = $1
   AND pdd.api_id IN ($2)
 GROUP BY date
 ORDER BY date;'''
tos_basic_credentials = '''SELECT `key`, `value`
  FROM dbconfig_settings
 WHERE `key` like 'travelApi%';'''
hh2_tour_dest_where_id = '''SELECT *
  FROM hh2_tour_destinations
 WHERE id = $1;'''
hh2_tours_like_name = '''SELECT t.id,
       t.name,
       tp.name AS departure,
       td.date
  FROM hh2_tours t
  LEFT JOIN hh2_tour_points_map tp
    ON t.id = tp.tour_id
  LEFT JOIN hh2_tour_dates td
    ON t.id = td.tour_id
 WHERE t.name like '%$1%';'''
hh2_tour_dates = '''SELECT *
  FROM hh2_tour_dates
 WHERE tour_id = $1;'''
hh2_tour_routes = '''SELECT t.id,
       t.name,
       tp.id,
       tp.name,
       td.id,
       td.name
  FROM hh2_tours t
  LEFT JOIN hh2_tour_points_map tp
    ON t.id = tp.tour_id
  LEFT JOIN hh2_tour_destinations_map td
    ON t.id = td.tour_id
 WHERE t.id = $1
 ORDER BY tp.name,
          td.name;'''
tapi_list_users = "select id, username from users;"
tapi_list_user_permission = '''SELECT user_id,
       api_id,
       api_username,
       api_password,
       api_token,
       extra,
       can_book,
       status
  FROM apis_user_permisions
 WHERE user_id = $1;'''
tapi_geo_w_name_like = '''SELECT *
  FROM geography
 WHERE name like '%$1%''''
tapi_insert_geo = '''INSERT INTO geography (parent_id, `name`, `type`, `level`)
VALUES ($1, $2, $3, $4);'''
tapi_pack_dep_dates_by_supp = '''SELECT DISTINCT date
  FROM packages_departure_dates
 WHERE api_id = $1
 ORDER BY date;'''

# Use the -d option to reference a DSN.
# Special characters in passwords and other strings can be escaped with URL encoding.
[alias_dsn]
tapi = mysql://travelapi_prod@127.0.0.1:3307/travelapi_prod
sail = mysql://sail:password@127.0.0.1:3306/laravel
sail_root = mysql://root:password@127.0.0.1:3306/laravel
tos_marsigli = mysql://marsigli_tos@127.0.0.1:3308/marsigli_tos
tos_look = mysql://look_tos@127.0.0.1:3308/look_tos
tos_hello = mysql://hello_tos@127.0.0.1:3308/hello_tos
# example_dsn = mysql://[user[:password]@][host][:port][/dbname]
